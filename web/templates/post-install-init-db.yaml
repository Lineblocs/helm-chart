{{- if .Values.initDb }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- include "resource.metadata" (dict "name" "init-db" "context" $) }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation

spec:
  backoffLimit: 5
  completions: 1 # turn off parallelism
  ttlSecondsAfterFinished: 1000
  template:
    metadata:
      name: {{ include "resource.name" (dict "name" "init-db-post-install" "context" .) }}
    spec:
      restartPolicy: Never
      volumes:
        - name: init-db-scripts
          configMap:
            name: {{ include "resource.name" (dict "name" "" "context" .) }}
            items:
              - key: init_db.sql
                path: init_db.sql
      containers:
        - name: {{ include "resource.name" (dict "name" "init-db-post-install" "context" .) }}
          {{- if .Values.mysql.enabled }}
          image: {{ printf "docker.io/%s:%s" .Values.mysql.image.repository .Values.mysql.image.tag }}
          {{- else }}
          image: {{ printf "docker.io/mysql:%s" .Values.initDbClientVersion }}
          {{- end }}
          imagePullPolicy: IfNotPresent
          env:
            {{- include "lineblocs.mysql.env" $ | indent 12 }}
            - name: DB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-root-password
                  name: {{ ternary (printf "%s-mysql" .Release.Name) (include "lineblocs.fullname" $) .Values.mysql.enabled }}
                  optional: false
            - name: DB_OPENSIPS_DATABASE
              value: {{ .Values.opensipsDatabase | quote }}
          command:
            - sh
            - -c
            - |
              sleep 30s
              mysql -h$DB_HOST -uroot -p$DB_ROOT_PASSWORD <<EOQ
{{- /*              if built-in mysql is disabled, create the users*/}}
              {{- if not .Values.mysql.enabled }}
              CREATE USER "$DB_USER"@'%' IDENTIFIED BY "$DB_PASS";
              {{- end }}
              CREATE DATABASE IF NOT EXISTS $DB_NAME;
              CREATE DATABASE IF NOT EXISTS $DB_OPENSIPS_DATABASE;
              GRANT ALL PRIVILEGES ON $DB_NAME.* TO $DB_USER@'%';
              GRANT ALL PRIVILEGES ON $DB_OPENSIPS_DATABASE.* TO $DB_USER@'%';
              EOQ
              mysql -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME < /tmp/init_db.sql
          volumeMounts:
            - mountPath: /tmp
              name: init-db-scripts
{{- end }}