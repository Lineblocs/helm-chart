{{- define "libs.deployment" -}}
{{- if or (not .Values.controllerType) (eq .Values.controllerType "Deployment" ) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "libs.fullname" . }}
  labels:
    {{- include "libs.labels" . | nindent 4 }}
  annotations:
    checksum/config: {{ include "libs.configmap" . | sha256sum }}
spec:
  replicas: {{ default 1 .Values.replicas }}
  selector:
    matchLabels:
      {{- include "libs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "libs.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.pvc }}
      volumes:
      {{- range . }}
        - name: {{ .name }}
          persistentVolumeClaim:
            claimName: {{ .name }}
      {{- end }}
      {{- end }}
      containers:
      {{- range .Values.containers }}
        - name: {{ .name }}
          {{- with .securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .volumesMounts }}
          volumeMounts:
            {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- /* We try to use first the component version defined, or the one defined for the selected release. If both
                 are empty, it will print no tag */}}
          {{- $containerTag := "" }}
          {{- if and ($.Values.global.releases) ($.Values.global.release) }}
            {{- $release := get $.Values.global.releases $.Values.global.release }}
            {{- $chart := get $release $.Chart.Name }}
            {{- if kindIs "map" $chart }}
              {{- $containerTag = get $chart .name }}
            {{- end }}
          {{- end }}
          {{- if .tag }}
          image: "{{ .image }}:{{ .tag }}"
          {{- else if $containerTag }}
          image: "{{ .image }}:{{ $containerTag }}"
          {{- else }}
          image: "{{ .image }}"
          {{- end }}
          imagePullPolicy: {{ or .imagePullPolicy $.Values.global.imagePullPolicy | default "IfNotPresent" }}
          envFrom:
          {{- with .envs }}
          # Container-specific secret
          {{- range $value := .secrets }}
            - secretRef:
                name: {{ $value }}
          {{- end }}
          {{- range $value := .configmaps }}
            - configMapRef:
                name: {{ $value.name }}
          {{- end }}
          {{- end }}
          {{- if and ($.Values.envs) ($.Values.envs.configs) }}
            - configMapRef:
                {{- /* using $ instead of a dot because we are in a range loop and . is redefined */}}
                name: {{ include "libs.fullname" $ }}-config
          {{- end }}
          # Deployment secret
          {{- if and ($.Values.envs) ($.Values.envs.secrets) }}
          {{- range $.Values.envs.secrets }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          {{- end }}
          {{- with .ports }}
          ports:
          {{ . | toYaml | indent 10 | trim }}
          {{- end }}
          {{- with .livenessProbe }}
          livenessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .readinessProbe }}
          readinessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- with .nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
---

{{- end }}
{{- end }}
